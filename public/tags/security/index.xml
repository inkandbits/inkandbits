<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Ode: An Ode to Lost Knowledge.</title>
    <link>http://localhost:1313/tags/security/</link>
    <description>Recent content in Security on Ode: An Ode to Lost Knowledge.</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 May 2018 18:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微服务安全沉思录之三</title>
      <link>http://localhost:1313/2018/05/23/external_system_auth/</link>
      <pubDate>Wed, 23 May 2018 18:00:00 +0000</pubDate>
      <guid>http://localhost:1313/2018/05/23/external_system_auth/</guid>
      <description>&lt;h2 id=&#34;外部系统访问控制&#34;&gt;外部系统访问控制&lt;/h2&gt;&#xA;&lt;p&gt;除用户访问和微服务之间的相互访问外，外部的第三方系统也可能需要访问系统内部的微服务。例如在上一篇博客的网上商店例子中，外部的推荐服务可能需要接入系统，以获取商店的商品目录信息。相对于内部服务之间的访问而言，外部系统的访问需要进行严格的安全控制。&lt;/p&gt;&#xA;&lt;h3 id=&#34;使用账号进行控制&#34;&gt;使用账号进行控制&lt;/h3&gt;&#xA;&lt;p&gt;可以为外部系统创建一个用户账号，类似普通用户一样对外部系统的账号进行管理，并使用该账号对外部系统进行认证和权限控制。&lt;/p&gt;&#xA;&lt;p&gt;采用这种方式的问题是难以处理用户相关的敏感数据。因为外部系统自身也是微服务系统中的一个用户账号，因此该外部系统只能访问该账号自身的数据和一些不敏感的公共数据，而不能访问和用户相关的数据。例如在网上商店的例子中，外部系统可以采用该方式访问商品目录信息，但不应允许访问用户历史购买记录，用户余额等信息。&lt;/p&gt;&#xA;&lt;h3 id=&#34;api-token&#34;&gt;API Token&lt;/h3&gt;&#xA;&lt;p&gt;是一个API Token（又称API Key）可以控制对用户敏感数据的访问。微服务应用提供一个API Token的生成界面，用户登录后可以生成自己的API Token，并在第三方应用使用该API Token访问微服务的API。在这种情况下，一般只允许第三方应用访问该Token所属用户自身的数据，而不能访问其他用户的敏感私有数据。&lt;/p&gt;&#xA;&lt;p&gt;例如Github就提供了Personal API Token功能，用户可以在&lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;Github的开发者设置界面&lt;/a&gt;中创建Token，然后使用该Token来访问Github的API。在创建Token时，可以设置该Token可以访问用户的哪些数据，如查看Repo信息，删除Repo，查看用户信息，更新用户信息等。&lt;/p&gt;&#xA;&lt;p&gt;使用API Token来访问Github API&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -u zhaohuabing:fbdf8e8862252ed0f3ba9dba4e328c01ac93aeec https://api.github.com/user&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;不用试了,这不是我的真实API Token, just for demonstration :-)&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;使用API Token而不是直接使用用户名/密码来访问API的好处是降低了用户密码暴露的风险，并且可以随时收回Token的权限而不用修改密码。&lt;/p&gt;&#xA;&lt;p&gt;由于API Token只能访问指定用户的数据，因此适合于用户自己开发一些脚本或小程序对应用中自己的数据进行操作。&lt;/p&gt;&#xA;&lt;h3 id=&#34;oauth&#34;&gt;OAuth&lt;/h3&gt;&#xA;&lt;p&gt;某些第三方应用需要访问不同用户的数据，或者对多个用户的数据进行整合处理，则可以考虑采用OAuth。采用OAuth，当第三方应用访问服务时，应用会提示用户授权第三方应用相应的访问权限，根据用户的授权操作结果生成用于访问的Token，以对第三方应用的操作请求进行访问控制。&lt;/p&gt;&#xA;&lt;p&gt;同样以Github为例，一些第三方应用如Travis CI，GitBook等就是通过OAuth和Github进行集成的。&#xA;OAuth针对不同场景有不同的认证流程，一个典型的认证流程如下图所示：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户向OAuth客户端程序发起一个请求，OAuth客户端程序在处理该请求时发现需要访问用户在资源服务器中的数据。&lt;/li&gt;&#xA;&lt;li&gt;客户端程序将用户请求重定向到认证服务器，该请求中包含一个callback的URL。&lt;/li&gt;&#xA;&lt;li&gt;认证服务器返回授权页面，要求用户对OAuth客户端的资源请求进行授权。&lt;/li&gt;&#xA;&lt;li&gt;用户对该操作进行授权后，认证服务器将请求重定向到客户端程序的callback url，将授权码返回给客户端程序。&lt;/li&gt;&#xA;&lt;li&gt;客户端程序将授权码发送给认证服务器，请求token。&lt;/li&gt;&#xA;&lt;li&gt;认证服务器验证授权码后将token颁发给客户端程序。&lt;/li&gt;&#xA;&lt;li&gt;客户端程序采用颁发的token访问资源，完成用户请求。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;备注：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;OAuth中按照功能区分了资源服务器和认证服务器这两个角色，在实现时这两个角色常常是同一个应用。将该流程图中的各个角色对应到Github的例子中，资源服务器和认证服务器都是Github，客户端程序是Travis CI或者GitBook，用户则是使用Travis CI或者GitBook的直接用户。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;有人可能会疑惑在该流程中为何要使用一个授权码(Authorization Code)来申请Token，而不是由认证服务器直接返回Token给客户端。OAuth这样设计的原因是在重定向到客户端Callback URL的过程中会经过用户代理（浏览器），如果直接传递Token存在被窃取的风险。采用授权码的方式，申请Token时客户端直接和认证服务器进行交互，并且认证服务期在处理客户端的Token申请请求时还会对客户端进行身份认证，避免其他人伪造客户端身份来使用认证码申请Token。&#xA;下面是一个客户端程序采用Authorization Code来申请Token的示例，client_id和client_secret被用来验证客户端的身份。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /oauth/token HTTP/1.1&#xA;Host: authorization-server.com&#xA; &#x9;&#x9;&#x9;&#xA;grant_type=authorization_code&#xA;&amp;amp;code=xxxxxxxxxxx&#xA;&amp;amp;redirect_uri=https://example-app.com/redirect&#xA;&amp;amp;client_id=xxxxxxxxxx&#xA;&amp;amp;client_secret=xxxxxxxxxx&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&#xA;  &lt;img src=&#34;http://localhost:1313/img/2018-05-23-external_system_auth/oauth_web_server_flow.png&#34; alt=&#34;OAuth认证流程&#34;&gt;&#xA;&#xA;&lt;/p&gt;&#xA;&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;另外在谈及OAuth时，我们需要注意微服务应用作为OAuth客户端和OAuth服务器的两种不同场景:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
